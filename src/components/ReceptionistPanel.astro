---
/**
 * ReceptionistPanel.astro (field-style, namespaced)
 * One big composer + arrow; context chips appear after first reply.
 * Posts JSON to /api/lead:
 * { name, email, phone, message, utm, channel:'ai-form', tz, ua, source:'infusio-site' }
 */
const { actionUrl = "/api/lead" } = Astro.props;

const chips = [
  { label: "Start 14-day trial", val: "I want my free trial" },
  { label: "Report a bug",        val: "I want to report a bug" },
  { label: "WhatsApp number?",    val: "What’s your WhatsApp number?" }
];
---

<div class="recept" data-action={actionUrl} aria-label="AI receptionist chat">
  <!-- Conversation log (hidden until first message) -->
  <div class="log" role="log" aria-live="polite" aria-relevant="additions" hidden></div>

  <!-- Single big composer -->
  <form class="composer" id="leadForm" novalidate>
    <!-- Honeypot -->
    <input type="text" name="hp" autocomplete="off" tabindex="-1" aria-hidden="true" style="position:absolute;left:-9999px;">

    <label for="chatInput" class="sr-only">Message</label>
    <textarea
      id="chatInput"
      placeholder="Type your request — I’ll collect the basics and get you scheduled."
    ></textarea>

    <!-- Context chips (appear after first bot message) -->
    <div class="chips" id="chips" hidden aria-label="Quick actions">
      {chips.map(c => <button class="chip" type="button" data-pick={c.val}>{c.label}</button>)}
    </div>

    <!-- Progressive details -->
    <div class="details" id="details" hidden>
      <div class="row">
        <label>
          <span>Email *</span>
          <input type="email" id="leadEmail" autocomplete="email" required />
        </label>
        <label>
          <span>Name</span>
          <input type="text" id="leadName" autocomplete="name" />
        </label>
        <label>
          <span>Phone</span>
          <input type="tel" id="leadPhone" autocomplete="tel" />
        </label>
      </div>
      <label class="consent">
        <input type="checkbox" id="leadConsent" />
        I agree to be contacted by Infusio for this request.
      </label>
    </div>

    <button class="send" id="btnSend" type="submit" aria-label="Send">
      <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
        <path d="M4 12h14M13 5l7 7-7 7" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </form>
</div>

<style>
  .recept{
    border-radius:16px;
    padding:14px;
    background: rgba(255,255,255,.03);
    border:1px solid rgba(255,255,255,.09);
    box-shadow: 0 12px 36px rgba(0,0,0,.35), inset 0 1px 0 rgba(255,255,255,.06);
  }

  /* LOG — completely zero space when hidden */
  .recept .log[hidden]{
    display:none !important;
    margin:0 !important;
    padding:0 !important;
    border:0 !important;
    max-height:0 !important;
  }
  .recept .log{
    display:flex; flex-direction:column; gap:10px;
    margin:0 0 10px; padding:10px; border-radius:12px;
    background: rgba(255,255,255,.02); border:1px solid rgba(255,255,255,.06);
    max-height:38vh; overflow:auto;
  }
  .recept .msg{ display:flex; gap:10px; }
  .recept .bubble{
    padding:10px 12px; border-radius:12px; line-height:1.45;
    background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.09);
    max-width:65ch;
  }
  .recept .user{ justify-content:flex-end; }
  .recept .user .bubble{
    background: rgba(45,212,191,.12); border-color:rgba(45,212,191,.28); color:#d8fff5;
  }

  /* SINGLE BIG FIELD */
  .recept .composer{
    position:relative;
    display:flex; flex-direction:column; gap:10px;
    border-radius:18px;
    padding:18px 68px 64px 18px; /* roomy, +right for arrow */

    background:
      radial-gradient(180px 120px at 15% 20%, rgba(45,212,191,.08), transparent),
      rgba(255,255,255,.04);
    border:1px solid rgba(255,255,255,.12);
    box-shadow:
      0 14px 40px rgba(0,0,0,.36),
      inset 0 1px 0 rgba(255,255,255,.06);
  }
  .recept .composer textarea{
    width:100%; min-height:56px; max-height:38vh; resize:vertical;
    border:0; outline:none; background:transparent;
    color:#eafff8; font-size:1.15rem; line-height:1.5; letter-spacing:.01em;
    padding:6px 8px;
  }
  .recept .composer textarea::placeholder{ color:rgba(200,240,230,.65) }

  .recept .send{
    position:absolute; right:10px; top:50%; transform:translateY(-50%);
    width:44px; height:44px; border-radius:12px;
    border:1px solid rgba(45,212,191,.35);
    background: rgba(45,212,191,.14); color:#bff7ea;
    display:grid; place-items:center;
    box-shadow: 0 0 24px rgba(45,212,191,.18);
  }

  /* CHIPS inside bar, bottom-left; appear later */
  .recept .chips{
    position:absolute; left:12px; bottom:12px; right:68px;
    display:flex; gap:8px; overflow:auto; padding:0 6px; scrollbar-width:none;
  }
  .recept .chips::-webkit-scrollbar{ display:none }
  .recept .chip{
    border-radius:999px; padding:6px 10px; font-size:.86rem; white-space:nowrap;
    color:#cfe9d9; background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.1);
  }

  /* DETAILS */
  .recept .details{
    width:100%; margin-top:6px; padding-top:8px; border-top:1px dashed rgba(255,255,255,.08);
  }
  .recept .row{ display:grid; grid-template-columns:2fr 1.5fr 1.2fr; gap:8px; }
  .recept .row label{ display:flex; flex-direction:column; gap:6px; font-size:.9rem; color:var(--muted-2); }
  .recept .row input{
    padding:10px; border-radius:8px; background:rgba(255,255,255,.03); color:#e9fff7;
    border:1px solid rgba(255,255,255,.15);
  }
  .recept .consent{ display:flex; gap:8px; align-items:center; margin-top:8px; font-size:.85rem; color:var(--muted); }

  @media (max-width:820px){
    .recept .row{ grid-template-columns:1fr; }
  }

  .sr-only{
    position:absolute!important; width:1px; height:1px; padding:0; margin:-1px;
    overflow:hidden; clip:rect(0,0,0,0); border:0;
  }
</style>

<script>
  const root     = document.getElementById('.recept');
  const action   = root.dataset.action || '/api/lead';
  const log      = root.querySelector('.log');
  const form     = root.querySelector('#leadForm');
  const input    = root.querySelector('#chatInput');
  const chipsRow = root.querySelector('#chips');
  const details  = root.querySelector('#details');
  const email    = root.querySelector('#leadEmail');
  const name     = root.querySelector('#leadName');
  const phone    = root.querySelector('#leadPhone');
  const consent  = root.querySelector('#leadConsent');

  let hasFirstExchange = false;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // If details panel is open, submit lead now
    if (!details.hidden) {
      if (!validateDetails()) { bot("Please add a valid email and tick the consent box."); return; }
      await submitLead();
      return;
    }

    const text = input.value.trim();
    if (!text) return;

    // reveal log on first interaction
    if (log.hidden) log.hidden = false;

    user(text);
    input.value = '';

    if (!hasFirstExchange) {
      hasFirstExchange = true;
      bot("Great — I’ll grab a couple contact details so we can reply with times today.");
      details.hidden = false;
      chipsRow.hidden = false;         // show minimal quick actions now
      email.focus();
    } else {
      bot("Perfect — add your email below and hit send.");
    }
  });

  // Chips fill the composer (don’t post immediately)
  chipsRow.addEventListener('click', (e) => {
    const btn = e.target.closest('.chip');
    if (!btn) return;
    input.value = btn.dataset.pick;
    input.focus();
  });

  // Helpers
  function user(text){ addMsg(text, true); }
  function bot(text){ addMsg(text, false); }

  function addMsg(text, isUser=false){
    const row = document.createElement('div');
    row.className = `msg ${isUser ? 'user' : 'bot'}`;
    const b = document.createElement('div');
    b.className = 'bubble';
    b.textContent = text;
    row.appendChild(b);
    log.appendChild(row);
    log.scrollTop = log.scrollHeight;
  }

  function validateDetails(){
    const ok = /^\S+@\S+\.\S+$/.test(email.value.trim());
    if (!ok) { email.focus(); email.reportValidity?.(); return false; }
    if (!consent.checked) { consent.focus(); return false; }
    return true;
  }

  async function submitLead(){
    const transcript = [...log.querySelectorAll('.msg.user .bubble')]
      .map(n => n.textContent).slice(-3).join(' • ');

    const utm = Object.fromEntries(new URLSearchParams(location.search));

    const payload = {
      source: 'infusio-site',
      channel: 'ai-form',
      mode: 'lead',
      message: transcript || "Website request from receptionist form",
      name: name.value.trim(),
      email: email.value.trim(),
      phone: phone.value.trim(),
      utm,
      tz: Intl.DateTimeFormat().resolvedOptions().timeZone,
      ua: navigator.userAgent
    };

    try{
      await fetch(action, {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify(payload)
      });
      bot("Thanks — details received. We’ll reply shortly with next steps.");
      details.hidden = true;
      input.focus();
    }catch(err){
      console.error(err);
      bot("Hmm, something went wrong. You can also email **hello@infusio.pro**.");
    }
  }

  // Enter = send, Shift+Enter = newline
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey){
      e.preventDefault();
      form.requestSubmit();
    } else if (e.key === 'Escape') {
      input.blur();
    }
  });
</script>